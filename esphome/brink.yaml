substitutions:
  name: brink
  device_description: "Esphome component for Brink Flair with modbus"
  lang: 'en' 
  # lang: 'lu' 

packages:
  substitutions: !include .brink-labels.yaml

esphome:
  name: ${name}
  on_boot:
    priority: 200
    then:
      - script.execute: on_boot

### ESP32 used is a MH-ET-LIVE, also known as Wemos D32 Mini 
### The modbus TTL to RS485 interface used is a XY-017  (RS3485). No flow control needed and 3.3V powersupply
esp32:
  board: mhetesp32minikit
  framework:
    type: arduino

# Enable/Disable logging
logger:
  logs:
    modbus_controller.sensor: WARN
    modbus_controller.output: WARN
    modbus.number: WARN
    esp32.preferences: WARN
    sensor: WARN
    text_sensor: WARN
    dht.sensor: WARN
    switch: WARN
    button: WARN
    number: WARN

# Enable Home Assistant API
api:

# Enable OTA updates  
ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ## Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name} hotspot"
    password: "configesp"

captive_portal:

# Enable Web server.
web_server:
  port: 80
  
# Sync time
time:
  - platform: sntp
    id: sntp_time
    timezone: "Europe/Amsterdam"
    on_time_sync:
      then:
        - logger.log: "Synchronized sntp clock"

script:
###  On reboot or powerloss of the esp, set the command to Modbus Step instead of Device LCD which is the default.
  - id: on_boot
    then:
      - lambda: |-
          auto new_value = 1;

          esphome::modbus_controller::ModbusController *controller = id(${name});
          auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
            controller, 8000, new_value);

          delay(200) ;
          controller->queue_command(set_value_cmd);
          ESP_LOGI("ModbusLambda", "Brink Modbus Step set");

###  Settings Brink Flair (no need to change normally)
###  menu 14-Communication: TypeBus=Modbus, Slave Address=20, Baudrate=19200, Parity=Even
uart:
  id: mod_bus
  tx_pin: 23
  rx_pin: 19
  baud_rate: 19200
  stop_bits: 1
  parity: even

modbus:
  id: modbus_brink
  send_wait_time: 200ms

modbus_controller:
  - id: ${name}
    ## Brink Modbus slaveaddress 20
    address: 20 
    command_throttle: 200ms
    setup_priority: -10
    update_interval: 10s

## i2c for DFROBOT GRAVITY SCD41, CO2 sensor - remove if not used
i2c:  
  sda: 21
  scl: 22
  scan: true
  id: bus_a

sensor:
## extra DHT22 sensor on the house suction side as it is not present in the Brink Flair.
#  - platform: dht
#    model: DHT22
#    pin: 22
#    temperature:
#      name: Binnen aanzuig temperatuur
#      id: temp_from_inside
#    humidity:
#      name: Binnen aanzuig luchtvochtigheid
#      id: humidity_from_inside
#    update_interval: 15s

  ## extra SCD41 sensor on the house suction side as it is not present in the Brink Flair. Remove if not used
  - platform: scd4x
    co2:
      name: Binnen aanzuig CO2
      id: co2_from_inside
      on_value:
        then:
        - if:
            condition:
              lambda: 'return x < 1000;'
            then:
            else:
            - if:
                condition:
                  lambda: 'return x > 1500;'
                then:
                else:
        
    humidity:
      name: Binnen aanzuig luchtvochtigheid    
      id: humidity_from_inside
      on_value:
        then:
        - if:
            condition:
              lambda: 'return x < 30;'
            then:
            else:
            - if:
                condition:
                  lambda: 'return x > 60;'
                then:
                else:

    temperature:
      name: Binnen aanzuig temperatuur    
      id: temp_from_inside

    temperature_offset: "2.0°C"
    
  - id: performance
    name: Rendement
    platform: template
    unit_of_measurement: "%"
    update_interval: 30s
    lambda: 'return ((id(temp_to_inside).state - id(temp_from_outside).state)/(id(temp_from_inside).state - id(temp_from_outside).state)*100);'
   # (temp_to_inside - temp_from_outside) / (temp_from_inside - temp_from_outside)

  - id: temp_to_inside
    name: Binnen uitblaas temperatuur
    platform: modbus_controller
    modbus_controller_id: brink
    address: 4036
    unit_of_measurement: "°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - id: humidity_to_inside
    name: Binnen uitblaas luchtvochtigheid
    icon: "mdi:water-percent"
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: read
    address: 4037
    unit_of_measurement: "%"
    value_type: U_WORD  
    accuracy_decimals: 0

  - id: dewpoint_to_inside
    name: Binnen dauwpunt
    platform: template
    lambda: |-
        return (243.5*(log(id(humidity_to_inside).state/100)+((17.67*id(temp_to_inside).state)/
        (243.5+id(temp_to_inside).state)))/(17.67-log(id(humidity_to_inside).state/100)-
        ((17.67*id(temp_to_inside).state)/(243.5+id(temp_to_inside).state))));
    unit_of_measurement: °C
    update_interval: 15s
    icon: 'mdi:thermometer-water'

  - id: temp_to_outside
    name: ${${lang}_temp_to_outside}
    platform: modbus_controller
    modbus_controller_id: brink
    address: 4046
    unit_of_measurement: "°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - id: humidity_to_outside
    name: ${${lang}_humidity_to_outside}
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:water-percent
    register_type: read
    address: 4047
    unit_of_measurement: "%"
    value_type: U_WORD  
    accuracy_decimals: 0

  - id: temp_from_outside  # NTC1
    name: ${${lang}_temp_from_outside}
    platform: modbus_controller
    modbus_controller_id: brink
    address: 4081
    unit_of_measurement: "°C"
    register_type: read
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - id: supply_pressure
    name: ${${lang}_supply_pressure}
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:gauge
    register_type: read
    address: 4023
    unit_of_measurement: "Pa"
    value_type: S_WORD  
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    
  - id: exhaust_pressure
    name: ${${lang}_exhaust_pressure}    
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:gauge
    register_type: read
    address: 4024
    unit_of_measurement: "Pa"
    value_type: S_WORD  
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - id: setpoint_inlet_volume
    name: ${$lang}_setpoint_inlet_volume}
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:fan
    address: 4031
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1

  - id: external_humidity_sensor
    name: Vochtsensor
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:thermometer-water
    register_type: read
    address: 4083
    unit_of_measurement: "%"
    value_type: U_WORD  
    accuracy_decimals: 0

  - id: current_inlet_volume
    name: Huidig inlaatluchtvolume
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:fan
    address: 4032
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1

  - id: setpoint_outlet_volume
    name: Uitlaatluchtvolume ingesteld
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:fan
    address: 4041
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1

  - id: current_outlet_volume
    name: Huidig uitlaatluchtvolume
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:fan
    address: 4042
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 1

  - id: frost_heater_power
    name: Bevriezing heaterpower
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:penguin
    address: 4071
    unit_of_measurement: "%"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 1

  - id: frost_fan_reduction
    name: Bevriezing fan reductie
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:penguin
    address: 4072
    unit_of_measurement: "%"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 1
    filters:
      - multiply: 1

  - id: current_filter_hours
    name: Filter uren
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:clock-start
    address: 4115
    unit_of_measurement: "Uur"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0

  - id: current_filter_days
    name: Filter dagen   
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:clock-start
    address: 4115
    unit_of_measurement: "dagen"
    register_type: read
    value_type: U_WORD
    accuracy_decimals: 0
    filters:
      - multiply: 0.041667
    on_value:
      then:
        - sensor.template.publish:
            id: exchange_filter_in
            state: !lambda |-
              return id(brink_dagen_filter_wissel).state - id(current_filter_days).state;

  - id: exchange_filter_in
    name: Filter wissel in
    platform: template
    unit_of_measurement: 'd'
    accuracy_decimals: 0

  - id: huidig_filter_m3_h
    name: Filter m3/h
    platform: modbus_controller
    modbus_controller_id: brink
    icon: mdi:clock-start
    address: 4116
    unit_of_measurement: "m3/h"
    register_type: read
    value_type: U_DWORD
    accuracy_decimals: 0

text_sensor:
  - id: status
    name: Status
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: read
    address: 4020
    raw_encode: NONE
    icon: mdi:home-heart
    lambda: |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0:  mode_str = "Standby"; break;
        case 1:  mode_str = "Bootloader"; break;        
        case 2:  mode_str = "Non Blocking Error"; break;
        case 3:  mode_str = "Blocking Error"; break;
        case 4:  mode_str = "Manual"; break;
        case 5:  mode_str = "Holiday"; break;
        case 6:  mode_str = "Night ventilation"; break;
        case 7:  mode_str = "Party"; break;
        case 8:  mode_str = "Bypass Boost"; break; 
        case 9:  mode_str = "Normal Boost"; break; 
        case 10:  mode_str = "Auto CO2"; break; 
        case 11:  mode_str = "Auto eBus"; break; 
        case 12:  mode_str = "Auto Modbus"; break; 
        case 13:  mode_str = "Auto Lan/ Wlan portal"; break; 
        case 14:  mode_str = "Auto Lan/ Wlan local"; break;                                                         
      }
      return mode_str;
   
  - id: bypass_status
    name: Bypass status
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: read
    address: 4050
    raw_encode: NONE
    icon: mdi:valve
    lambda: |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0:  mode_str = "Initialisatie"; break;
        case 1:  mode_str = "Open"; break;
        case 2:  mode_str = "Dicht"; break;
        case 3:  mode_str = "Open"; break;
        case 4:  mode_str = "Dicht"; break;
        default: mode_str = "Onbekend"; break;
       }
      return mode_str;

  - id: frost_status
    name: Bevriezing status
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: read
    address: 4070
    raw_encode: NONE
    icon: mdi:penguin
    lambda: |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0:  mode_str = "Initialisatie"; break;
        case 1:  mode_str = "PowerUp Delay"; break;
        case 2:  mode_str = "No Frost"; break;
        case 3:  mode_str = "NoFrost Delay"; break;
        case 4:  mode_str = "FrostControl Start Delay"; break;
        case 5:  mode_str = "Wait For Icing"; break;
        case 6:  mode_str = "Ice Detected Delay"; break;
        case 7:  mode_str = "Heating"; break;
        case 8:  mode_str = "Wait for Free Heater"; break;
        case 9:  mode_str = "FanControl Start Delay"; break;
        case 10:  mode_str = "FanControl Wait Delay"; break;
        case 11:  mode_str = "FanControl"; break;
        case 12:  mode_str = "Fan Off Delay"; break;
        case 13:  mode_str = "Fan Off"; break;
        case 14:  mode_str = "Fan Restarting"; break;
        case 15:  mode_str = "Error"; break;
        case 16:  mode_str = "Test modus"; break;
        default: mode_str = "Onbekend"; break;
       }
      return mode_str;

  - id: filterstatus
    name: Filter status
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: read
    address: 4100
    raw_encode: NONE
    icon: mdi:air-filter
    lambda: |-
      uint16_t int_mode = (data[item->offset] << 8) + data[item->offset+1];
      ESP_LOGD("main","Parsed operation mode int : %d", int_mode);
      std::string mode_str;
      switch (int_mode) {
        case 0:  mode_str = "Niet vervuild"; break;
        case 1:  mode_str = "Vervuild";
      }
      return mode_str;

  - id: laatste_reset_filter
    name: Filter reset op
    platform: template
    icon: mdi:clock-start
    update_interval: 600s
    filters:
      - substitute:
        - "Jan -> jan"
        - "Feb -> feb"
        - "Mar -> maart"
        - "Apr -> april"
        - "Mai -> mei"
        - "Jun -> juni"
        - "Jul -> juli"
        - "Aug -> aug"
        - "Sep -> sept"
        - "Okt -> okt"
        - "Nov -> nov"
        - "Dec -> dec"
        - "Mon -> ma"
        - "Tue -> di"
        - "Wed -> wo"
        - "Thu -> do"
        - "Fri -> vrij"
        - "Sat -> zat"
        - "Sun -> zon"


select:
  - id: modbus_controller_mode
    name: Modbus Control Mode
    platform: modbus_controller
    modbus_controller_id: brink 
    address: 8000
    value_type: S_WORD
    optimistic: true
    optionsmap:
      "Device LCD": 0      
      "Modbus Step": 1
      "Modbus Flow": 2

  - id: bypass_mode
    name: Bypass Mode
    platform: modbus_controller
    modbus_controller_id: brink  
    address: 6100
    value_type: S_WORD
    optionsmap:
      "Auto": 0
      "Dicht": 1
      "Open": 2

  - id: bypass_boost_fan_stand    
    name: Bypass Boost fan stand
    platform: modbus_controller
    modbus_controller_id: brink  
    address: 6105
    value_type: S_WORD
    optionsmap:
      "Vakantie": 0
      "Stand 1": 1
      "Stand 2": 2
      "Stand 3": 3

switch:
  - id: bypass_boost
    name: Bypass Boost
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: holding
    address: 6104
    bitmask: 1
    entity_category: config
    icon: mdi:toggle-switch

  - id: rht_sensor
    name: Vochtsensor
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: holding
    address: 6140
    bitmask: 1
    entity_category: config
    icon: mdi:toggle-switch

  - id: reset_filter
    name: Reset Filter
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: holding  
    address: 8010
    bitmask: 1
    icon: mdi:toggle-switch
    disabled_by_default: true


button:
  - id: reset_filter_button
    name: Filter reset
    platform: template
    on_press:
      then:
        - switch.turn_on: reset_filter
        - delay: 2s
        - switch.turn_off: reset_filter
        - text_sensor.template.publish:
            id: laatste_reset_filter
            state: !lambda |-
              char str[22];
              time_t currTime = id(sntp_time).now().timestamp;
              strftime(str, sizeof(str), "%a %d %b %H:%M", localtime(&currTime));
              return  { str };


## temporarely test button for Step modbus mode after reboot or powerloss
  - id: Step_modbus
    name: Step Modbus
    platform: template
    on_press:
      then:
       - lambda: |-
           auto new_value = 1;

           esphome::modbus_controller::ModbusController *controller = id(${name});
           auto set_value_cmd = esphome::modbus_controller::ModbusCommandItem::create_write_single_command(
             controller, 8000, new_value);

           delay(200) ;
           controller->queue_command(set_value_cmd);
           ESP_LOGI("ModbusLambda", "Brink Modbus Step set");


number:
  - id: ventilatie_stand
    name: Ventilatie stand
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: holding
    address: 8001
    value_type: S_WORD      
    min_value: 0
    max_value: 3
    mode: slider
    icon: mdi:fan

# Maximum value for Flair 300 is 300m3/h
  - id: brink_modbusflow_waarde
    name: Modbus flow waarde
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: holding
    address: 8002
    value_type: S_WORD      
    min_value: 0
    max_value: 280
    mode: slider

  - id: brink_flow_1
    name: Flow 1
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: holding
    address: 6001
    unit_of_measurement: "m3/h"
    value_type: S_WORD      
    min_value: 50
    max_value: 325
    mode: slider
    icon: mdi:fan-speed-1

  - id: brink_flow_2
    name: Flow 2
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: holding
    address: 6002
    unit_of_measurement: "m3/h"
    value_type: S_WORD      
    min_value: 50
    max_value: 325
    mode: slider
    icon: mdi:fan-speed-2

  - id: brink_flow_3
    name: Flow 3
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: holding
    address: 6003
    unit_of_measurement: "m3/h"
    value_type: S_WORD   
    min_value: 50
    max_value: 325
    mode: slider
    icon: mdi:fan-speed-3
      
  - id: brink_imbalance_intake
    name: Fan Onbalans Inlaat  
    platform: modbus_controller
    modbus_controller_id: brink
    address: 6035
    unit_of_measurement: "%"
    value_type: S_WORD   
    multiply: 10    
    min_value: -15
    max_value: 15
    mode: slider
    icon: mdi:home-import-outline

##  BYPASS OPEN
##  ▪ De buitentemperatuur is hoger dan 10°C (instelbaar tussen 7°C en 15°C) EN
##  ▪ de buitentemperatuur is lager dan de binnentemperatuur uit de woning EN
##  ▪ de binnentemperatuur uit woning is hoger dan 24°C ( instelbaar tussen 15°C en 35°C )

##  BYPASS DICHT
##  ▪ De buitentemperatuur is lager dan 10° (instelbaar tussen 7°C en 15°C) C OF
##  ▪ de buitentemperatuur is hoger dan de binnentemperatuur uit de woning OF
##  ▪ de temperatuur uit de woning is lager dan de ingestelde temperatuur
##    minus de ingestelde temperatuur bij de hysterese

  - id: brink_bypass_from_dwelling ## van binnen naar buitenuitblaas, default 24 °C
    name: Bypass temp uit woning  
    platform: modbus_controller
    modbus_controller_id: brink
    address: 6101
    unit_of_measurement: "°C"
    value_type: S_WORD
    min_value: 15
    max_value: 35
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-export-outline

  - id: brink_bypass_from_outside ## van buiten naar binnen aanzuig, default 10 °C
    name: Bypass temp van buiten  
    platform: modbus_controller
    modbus_controller_id: brink
    address: 6102
    unit_of_measurement: "°C"
    value_type: S_WORD
    min_value: 7
    max_value: 15
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-import-outline

  - id: brink_bypass_hysterese ## default 2 °C
    name: Bypass hysterese  
    platform: modbus_controller
    modbus_controller_id: brink
    address: 6103
    unit_of_measurement: "°C"
    value_type: S_WORD
    min_value: 0
    max_value: 5
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-edit-outline

### Vorstbeveiliging
  - id: brink_frost_control_temperature ## default 0 °C
    name: Bevriezing controle temperatuur
    platform: modbus_controller
    modbus_controller_id: brink
    address: 6110
    unit_of_measurement: "°C"
    value_type: S_WORD      
    min_value: -1.5
    max_value: 1.5
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-export-outline

  - id: brink_frost_minimum_inlet_temperature  ## default 10 °C
    name: Bevriezing minimum inlaat temperatuur
    platform: modbus_controller
    modbus_controller_id: brink
    address: 6111
    unit_of_measurement: "°C"
    value_type: S_WORD      
    min_value: 7
    max_value: 17
    step: 0.5
    multiply: 10
    mode: slider
    icon: mdi:home-export-outline

  - id: brink_imbalance_exhaust  ## default 0
    name: Fan Onbalans Uitlaat
    platform: modbus_controller
    modbus_controller_id: brink
    address: 6036
    unit_of_measurement: "%"
    value_type: S_WORD      
    multiply: 10 
    min_value: -15
    max_value: 15
    mode: slider
    icon: mdi:home-export-outline

  - id: brink_dagen_filter_wissel
    name: Dagen filter wissel
    platform: modbus_controller
    modbus_controller_id: brink
    register_type: holding
    address: 6120
    unit_of_measurement: ""
    value_type: S_WORD      
    min_value: 0
    max_value: 365
    mode: slider
    icon: mdi:timer-sync-outline